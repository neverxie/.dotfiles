"=========================================================================
" File		 :  .vimrc
" Change Logs:
" Date			Author		Notes
" 2019-04-10	never		the first version
"=========================================================================

"-------------------------------------------------------------------------
" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
"-------------------------------------------------------------------------
runtime! debian.vim

"-------------------------------------------------------------------------
" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
"-------------------------------------------------------------------------
if has("syntax")
	syntax on
endif

"-------------------------------------------------------------------------
" generation
"-------------------------------------------------------------------------
"set listchars=tab:>-,trail:.
"set list
set number
set nowritebackup
set nobackup
set incsearch
set hlsearch

set tabstop=4
set softtabstop=4
set shiftwidth=4
set cindent

set guioptions-=T "隐藏工具栏
set pumheight=4
set completeopt-=preview
set tags=tags;/
filetype indent on

nmap <F8> :noh<CR>

"-------------------------------------------------------------------------
" 文件编码
"-------------------------------------------------------------------------
set fileencodings=UTF-8,cp936
let loaded_matchparen = 1
au BufNewFile,BufRead *.c,*.cpp,*.h,*.S,*.s set expandtab

"-------------------------------------------------------------------------
" 主题
"-------------------------------------------------------------------------
colorscheme peachpuff

"-------------------------------------------------------------------------
" 搜索高亮
"-------------------------------------------------------------------------
highlight Search ctermfg=black

"-------------------------------------------------------------------------
" 第81列非空字符设置高亮
"-------------------------------------------------------------------------
highlight ColorColumn ctermfg=cyan guifg=cyan ctermbg=None guibg=bg
call matchadd('ColorColumn', '\%81v', 100)

"-------------------------------------------------------------------------
" 行尾空字符高亮
"-------------------------------------------------------------------------
" 禁止加载该插件，这里是没有作用的
if exists('loaded_trailing_whitespace_plugin') | finish | endif
let loaded_trailing_whitespace_plugin = 1

if !exists('g:extra_whitespace_ignored_filetypes')
	    let g:extra_whitespace_ignored_filetypes = []
endif

function! ShouldMatchWhitespace()
	for ft in g:extra_whitespace_ignored_filetypes
		if ft ==# &filetype | return 0 | endif
	endfor
	return 1
endfunction

highlight default ExtraWhitespace ctermbg=darkred guibg=darkred

autocmd ColorScheme * highlight default ExtraWhitespace ctermbg=darkred guibg=darkred
autocmd BufRead,BufNew * if ShouldMatchWhitespace() | match ExtraWhitespace /\\\@<![\u3000[:space:]]\+$/ | else | match ExtraWhitespace /^^/ | endif

" The above flashes annoyingly while typing, be calmer in insert mode
autocmd InsertLeave * if ShouldMatchWhitespace() | match ExtraWhitespace /\\\@<![\u3000[:space:]]\+$/ | endif
autocmd InsertEnter * if ShouldMatchWhitespace() | match ExtraWhitespace /\\\@<![\u3000[:space:]]\+\%#\@<!$/ | endif

function! s:FixWhitespace(line1,line2)
    let l:save_cursor = getpos(".")
    silent! execute ':' . a:line1 . ',' . a:line2 . 's/\\\@<!\s\+$//'
    call setpos('.', l:save_cursor)
endfunction

" Run :FixWhitespace to remove end of line white space
command! -range=% FixWhitespace call <SID>FixWhitespace(<line1>,<line2>)

"-------------------------------------------------------------------------
" 行号颜色
"-------------------------------------------------------------------------
highlight linenr ctermfg=darkmagenta guifg=fg
"highlight linenr ctermfg=darkgray
"highlight linenr ctermfg=gray
"highlight linenr ctermfg=lightgray
"highlight linenr ctermfg=brown

"-------------------------------------------------------------------------
" 分割线样式
"-------------------------------------------------------------------------
highlight VertSplit ctermfg=gray ctermbg=none cterm=none
" guibg无法设置none
if has('gui_running')
	highlight VertSplit guibg=bg guifg=fg
endif

"-------------------------------------------------------------------------
" 状态行
"-------------------------------------------------------------------------
function! GitCheck()
	return system("git rev-parse --git-dir 2> /dev/null")
endfunction

function! GitBranch()
	"return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
	return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! GitModify()
	return system("git ls-files --modified `git rev-parse --show-cdup` | wc -l | tr -d '\n'")
endfunction

function! GitNotAdd()
	return system("git ls-files --others --exclude-standard `git rev-parse --show-cdup` | wc -l | tr -d '\n'")
endfunction

function! StatuslineGit()
	let l:br = GitBranch()
	"return strlen(l:br) > 0?'  '.l:br.' ':''
	return strlen(l:br) > 0?'  '.l:br.'':''
endfunction

hi StatusLine ctermfg=red guifg=red guibg=bg ctermbg=none term=none cterm=none gui=none
hi StatusLineNC ctermfg=gray guifg=gray guibg=bg ctermbg=none term=none cterm=none gui=none

set statusline=
set statusline+=\ %<%f
set statusline+=\ \|\ ascii:%b
set statusline+=\ \|\ hex:0x%02.2B
"set statusline+=\ \|\ hex:0x%02.2B\ \|\ 
"set statusline+=\ %1*\|%*\ %2*\ %*
"set statusline+=%2*%{StatuslineGit()}%*
"set statusline+=%{StatuslineGit()}
set statusline+=\ %=\ %{''.(&ff).''}
"set statusline+=\ \|\ %{&fenc}
set statusline+=\ \|\ %{''.(&fenc!=''?&fenc:&enc).''}      "Encoding
set statusline+=\ \|\ %Y
set statusline+=\ \|\ %=%l/%L\ %c
set statusline+=\ \|\ %M%R%W\ %P\ 
set laststatus=2

"set statusline+=\ \|\ %1*%*
"set statusline+=\ \|\ %1*%*%{StatuslineGit()}
highlight User1 ctermfg=lightgrey
highlight User2 ctermfg=lightgrey
"-------------------------------------------------------------------------
" 字体
"-------------------------------------------------------------------------
if has('gui_running')
	set guifont=FiraCode\ 7
endif

"-------------------------------------------------------------------------
" 新文件标题
"-------------------------------------------------------------------------
"新建.c,.h,.sh,.java文件，自动插入文件头
autocmd BufRead,BufNewFile	*.sh set filetype=sh
autocmd BufRead,BufNewFile	*.c set filetype=c
autocmd BufRead,BufNewFile	*.h set filetype=cpp
autocmd BufRead,BufNewFile vimrc set filetype=vim
autocmd BufRead,BufNewFile *.py set filetype=python
autocmd BufRead,BufNewFile	*.mk,Makefile,Makefile.build set filetype=make
autocmd BufNewFile *.h,*.c,*.cpp,*.py,*.sh,*.mk,Makefile,Makefile.build,vimrc exec ":call SetTitle()"
func SetTitle()
	"c、h文件共用"
	if &filetype == 'c' " 空格
		call setline(1,			 "/*")
        "call append(line("."),	 " * Copyright (c) 2019, never.xie <neverxie@outlook.com>")
        "call append(line("."),	 " * ")
        call append(line("."),	 " * File       : ".expand("%"))
        call append(line(".")+1, " *")
        call append(line(".")+2, " * Change Logs:")
        call append(line(".")+3, " * Date         Author    Notes")
        call append(line(".")+4, " * ".strftime("%F")."   never     the first version")
        call append(line(".")+5, " */")

	elseif &filetype == 'cpp'
		call setline(1,			 "/*")
        "call append(line("."),	 " * Copyright (c) 2019, never.xie <neverxie@outlook.com>")
        "call append(line("."),	 " * ")
        call append(line("."),	 " * File       : ".expand("%"))
        call append(line(".")+1, " *")
        call append(line(".")+2, " * Change Logs:")
        call append(line(".")+3, " * Date         Author    Notes")
        call append(line(".")+4, " * ".strftime("%F")."   never     the first version")
        call append(line(".")+5, " */")

	elseif &filetype == 'python' " 空格
        call setline(1,			"#=========================================================================")
        call append(line("."),	"# File       : ".expand("%"))
        call append(line(".")+1,"#")
        call append(line(".")+2,"# Change Logs:")
        call append(line(".")+3,"# Date         Author      Notes")
        call append(line(".")+4,"# ".strftime("%F")."   never       the first version")
        call append(line(".")+5,"#=========================================================================")

	elseif &filetype == 'vim' " tab
        call setline(1,			"\"=========================================================================")
        call append(line("."),	"\" File		 :  ".expand("%"))
        call append(line(".")+1,"\"")
        call append(line(".")+2,"\" Change Logs:")
        call append(line(".")+3,"\" Date			Author		Notes")
        call append(line(".")+4,"\" ".strftime("%F")."	never		the first version")
        call append(line(".")+5,"\"=========================================================================")

	else " tab
        call setline(1,			"#=========================================================================")
        call append(line("."),	"# File		 :  ".expand("%"))
        call append(line(".")+1,"#")
        call append(line(".")+2,"# Change Logs:")
        call append(line(".")+3,"# Date			Author		Notes")
        call append(line(".")+4,"# ".strftime("%F")."	never		the first version")
        call append(line(".")+5,"#=========================================================================")
    endif

	if &filetype == 'python'
        call append(line(".")+6, "")
        call append(line(".")+7, "# !/usr/bin/python")
        call append(line(".")+8, "# -*- coding:utf-8 -*-")
        call append(line(".")+9, "")
	endif

	if &filetype == 'sh'
        call append(line(".")+6, "")
        call append(line(".")+7, "# !/bin/bash")
        call append(line(".")+8, "")
	endif

    if &filetype == 'cpp'
        call append(line(".")+6,  "")
		call append(line(".")+7,  "#ifndef __".toupper(expand("%:t:r"))."_H")
		call append(line(".")+8,  "#define __".toupper(expand("%:t:r"))."_H")
        call append(line(".")+9,  "")
		call append(line(".")+10, "#ifdef __cplusplus")
		call append(line(".")+11, "extern \"C\" {")
		call append(line(".")+12, "")
		call append(line(".")+13, "#endif")
		call append(line(".")+14, "#ifdef __cplusplus")
		call append(line(".")+15, "}")
		call append(line(".")+16, "#endif")
		call append(line(".")+17, "#endif /*__".toupper(expand("%:t:r"))."_H*/")
    endif

    if &filetype == 'c'
		call append(line(".")+6, "")
		call append(line(".")+7,"#include \"".expand("%:t:r").".h\"")
        call append(line(".")+8, "")
    endif
    "新建文件后，自动定位到文件末尾
    autocmd BufNewFile * normal G
endfunc

"-------------------------------------------------------------------------
" 编译运行
"-------------------------------------------------------------------------
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec "!g++ % -o %<"
        exec "! ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "! ./%<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!java %<"
    elseif &filetype == 'sh'
        :!./%
    endif
endfunc

"-------------------------------------------------------------------------
" vim插件
"-------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')
" 行尾空白字符高亮
"Plug 'bronson/vim-trailing-whitespace'
" 不知道是什么插件
"Plug 'godlygeek/tabular'
" md语法
Plug 'plasticboy/vim-markdown'
Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'
call plug#end()

" vim-markdown关闭折叠
let g:vim_markdown_folding_disabled = 1
let g:instant_markdown_autostart = 0

"-------------------------------------------------------------------------
" 按键映射
"-------------------------------------------------------------------------
nmap <silent> <F9> <Plug>MarkdownPreview
imap <silent> <F9> <Plug>MarkdownPreview
nmap <silent> <F10> <Plug>StopMarkdownPreview
imap <silent> <F10> <Plug>StopMarkdownPreview
